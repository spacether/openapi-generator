# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from petstore_api.model_utils import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    FloatSchema,
    IntOrFloatSchema,
    DateSchema,
    DateTimeSchema,
    BoolSchema,
    FileSchema,
    NoneSchema,
    class_property,
    cached_property,
    isoparse,
    none_type,
    date,
    datetime,
    _get_discriminated_class_helper,
)

def lazy_import():
    from petstore_api.model.animal import Animal
    from petstore_api.model.number_with_validations import NumberWithValidations
    globals()['Animal'] = Animal
    globals()['NumberWithValidations'] = NumberWithValidations

class ComposedOneOfDifferentTypes(ComposedSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    this is a model that allows payloads of type object or number

    Attributes:
    _additional_properties (Schema): the definition used for additional properties
        that are not defined in _properties
    """

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        oneOf_2 = NoneSchema
        oneOf_3 = DateSchema
        class oneOf_4(DictSchema):
            _validations = {
                'max_properties': 4,
                'min_properties': 4,
            }




        class oneOf_5(ListSchema):
            _validations = {
                'max_items': 4,
                'min_items': 4,
            }

            _items = AnyTypeSchema



        class oneOf_6(DateTimeSchema):
            _validations = {
                'regex': [{
                    'pattern': r'^2020.*',  # noqa: E501
                }],
            }

        return {
            'allOf': [
            ],
            'oneOf': [
                NumberWithValidations,
                Animal,
                oneOf_2,
                oneOf_3,
                oneOf_4,
                oneOf_5,
                oneOf_6,
            ],
            'anyOf': [
            ],
        }
