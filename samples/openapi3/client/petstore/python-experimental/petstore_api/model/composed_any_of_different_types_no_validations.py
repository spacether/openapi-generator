# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from petstore_api.model_utils import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    FloatSchema,
    IntOrFloatSchema,
    DateSchema,
    DateTimeSchema,
    BoolSchema,
    FileSchema,
    NoneSchema,
    class_property,
    cached_property,
    isoparse,
    none_type,
    date,
    datetime,
    _get_discriminated_class_helper,
)

class ComposedAnyOfDifferentTypesNoValidations(ComposedSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
    _additional_properties (Schema): the definition used for additional properties
        that are not defined in _properties
    """

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        class anyOf_0(DictSchema):
            pass

        anyOf_1 = DateSchema
        anyOf_2 = DateTimeSchema
        anyOf_3 = FileSchema
        anyOf_4 = StrSchema
        anyOf_5 = StrSchema
        class anyOf_6(DictSchema):
            pass

        anyOf_7 = BoolSchema
        anyOf_8 = NoneSchema



        class anyOf_9(ListSchema):

            _items = AnyTypeSchema

        anyOf_10 = IntOrFloatSchema
        anyOf_11 = FloatSchema
        anyOf_12 = FloatSchema
        anyOf_13 = IntSchema
        anyOf_14 = IntSchema
        anyOf_15 = IntSchema
        return {
            'allOf': [
            ],
            'oneOf': [
            ],
            'anyOf': [
                anyOf_0,
                anyOf_1,
                anyOf_2,
                anyOf_3,
                anyOf_4,
                anyOf_5,
                anyOf_6,
                anyOf_7,
                anyOf_8,
                anyOf_9,
                anyOf_10,
                anyOf_11,
                anyOf_12,
                anyOf_13,
                anyOf_14,
                anyOf_15,
            ],
        }
