# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from petstore_api.model_utils import (  # noqa: F401
    AnyTypeSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    FloatSchema,
    IntOrFloatSchema,
    DateSchema,
    DateTimeSchema,
    BoolSchema,
    FileSchema,
    NoneSchema,
    class_property,
    cached_property,
    isoparse,
    none_type,
    _get_discriminated_class_helper,
)

def lazy_import():
    from petstore_api.model.cat import Cat
    from petstore_api.model.dog import Dog
    globals()['Cat'] = Cat
    globals()['Dog'] = Dog



class Animal(DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
    className (str,): 
    color (str,): 
    _additional_properties (Schema): the definition used for additional properties
        that are not defined in _properties
    _discriminator(cls) -> dict: the key is the required discriminator propertyName
        the value is a dict mapping from a string name to the corresponding Schema class
    """
    _required_property_names = {
        'className',
    }
    className = StrSchema
    color = StrSchema
    @classmethod
    def _get_discriminated_class(cls, _disc_property_name=None, **kwargs):
        return _get_discriminated_class_helper(
            _disc_property_name, __class__._discriminator, super(), **kwargs)

    @cached_property
    def _discriminator():
        lazy_import()
        return {
            'className': {
                'Cat': Cat,
                'Dog': Dog,
            }
        }

